# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/modules/indexer.ipynb.

# %% auto 0
__all__ = ['export_video', 'index']

# %% ../nbs/modules/indexer.ipynb 1
import ffmpeg
import numpy as np
import pandas as pd

from PIL import Image
from shutil import copy
from pathlib import Path

from .storage import Storage
from .model import Model

# %% ../nbs/modules/indexer.ipynb 2
def export_video(video_path: Path, start_frame, end_frame):
    in_file = ffmpeg.input(video_path, loglevel='warning', copyts=None)
    out_file = f"../../data/runtime/fragments/{video_path.stem}_{start_frame}_{end_frame}.mp4"
    (
        ffmpeg.concat(in_file.trim(start_frame=start_frame, end_frame=end_frame))
        .filter('scale', 854 , 480)
        .filter('setsar', '1')
        .filter('setpts', expr='PTS-STARTPTS')
        .output(out_file).run()
    )
    return out_file

# %% ../nbs/modules/indexer.ipynb 3
def index(video_path: str, threshold = 0.10):

    video_name = Path(video_path).name
    if Path(video_path) != Path("../../data/runtime/videos/" + video_name):
        copy(video_path, "../../data/runtime/videos/" + video_name)

    out, _ = (
        ffmpeg.input(video_path, loglevel="warning")
        .filter('scale', size='film')
        .output('pipe:', format='rawvideo', pix_fmt='rgb24')
        .run(capture_stdout=True)
    )

    film = 352, 240
    width, height = film

    images = (
        np.frombuffer(out, np.uint8)
        .reshape([-1, height, width, 3])
    )

    df = Storage.load()

    empty_df = True if "video_name" not in df.columns else False

    model = Model()
    image_features = model.get_image_features(images)

    slices = [0]
    threshold = 0.15
    for i in range(1, len(images)):
        if 1 - image_features[i-1] @ image_features[i] >= threshold:
            slices.append(i)
    
    slices.append(len(images)+1)

    entries = []
    video_name = Path(video_path).stem
    for i in range(len(slices)-1):
        start = slices[i]
        end = slices[i+1]
        preview_name = f"{video_name}_{start}_{end}.png"
        entries.append((video_name, preview_name, start, end))

        Image.fromarray(images[slices[i]]).save("../../data/runtime/frames/" + preview_name)
        fragment_video = export_video(Path(video_path),start,end)

    new_df = pd.DataFrame(data = entries, columns= ["video_name", "preview_name", "start", "end"])

    if empty_df:
        df = new_df
    else:
        df = pd.concat([df, new_df], ignore_index=True)

    df.to_pickle("../../data/runtime/index.pkl")
